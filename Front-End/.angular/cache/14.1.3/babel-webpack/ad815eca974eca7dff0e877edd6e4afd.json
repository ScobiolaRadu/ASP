{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';\nimport { APP_BASE_HREF, DOCUMENT } from '@angular/common';\nconst COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');\nconst COOKIE_WRITER = new InjectionToken('COOKIE_WRITER');\n\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\n\nfunction isPresent(obj) {\n  return !isNil(obj);\n}\n\nfunction isString(obj) {\n  return typeof obj === 'string';\n} // noinspection JSUnusedGlobalSymbols\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction isEmpty(value) {\n  if (isNil(value)) {\n    return true;\n  }\n\n  if (value === {}) {\n    return true;\n  }\n\n  if (isString(value) && value.length === 0) {\n    return true;\n  }\n\n  if (Array.isArray(value) && value.length === 0) {\n    return true;\n  }\n\n  if (typeof value !== 'boolean' && !value) {\n    return true;\n  } // noinspection RedundantIfStatementJS\n\n\n  if (typeof value === 'object' && Object.keys(value).length === 0 && value.constructor === Object) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergeOptions(oldOptions, newOptions) {\n  if (!newOptions) {\n    return oldOptions;\n  }\n\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n  };\n}\n\nfunction parseCookieString(currentCookieString) {\n  let lastCookies = {};\n  let lastCookieString = '';\n  let cookieArray;\n  let cookie;\n  let i;\n  let index;\n  let name;\n\n  if (currentCookieString !== lastCookieString) {\n    lastCookieString = currentCookieString;\n    cookieArray = lastCookieString.split(';');\n    lastCookies = {};\n\n    for (i = 0; i < cookieArray.length; i++) {\n      cookie = cookieArray[i];\n      index = cookie.indexOf('=');\n\n      if (index > 0) {\n        // ignore nameless cookies\n        name = safeDecodeURIComponent(cookie.substring(0, index).trim()); // the first value that is seen for a cookie is the most\n        // specific one.  values for the same cookie name that\n        // follow are for less specific paths.\n\n        if (isNil(lastCookies[name])) {\n          lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1).trim());\n        }\n      }\n    }\n  }\n\n  return lastCookies;\n}\n\nfunction buildCookieString(name, value, options) {\n  let expires = options?.expires;\n  let val;\n\n  if (isNil(value)) {\n    expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n    val = '';\n  } else {\n    val = value;\n  }\n\n  if (isString(expires)) {\n    expires = new Date(expires);\n  }\n\n  const cookieValue = options?.storeUnencoded ? value : encodeURIComponent(val);\n  let str = encodeURIComponent(name) + '=' + cookieValue;\n  str += options?.path ? ';path=' + options.path : '';\n  str += options?.domain ? ';domain=' + options.domain : '';\n  str += expires ? ';expires=' + expires.toUTCString() : '';\n  str += options?.sameSite ? '; SameSite=' + options.sameSite : '';\n  str += options?.secure ? ';secure' : '';\n  str += options?.httpOnly ? '; HttpOnly' : ''; // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n  // - 300 cookies\n  // - 20 cookies per unique domain\n  // - 4096 bytes per cookie\n\n  const cookieLength = str.length + 1;\n\n  if (cookieLength > 4096) {\n    console.log('Cookie \\'' + name + '\\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');\n  }\n\n  return str;\n}\n\nfunction safeDecodeURIComponent(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nclass CookieOptionsProvider {\n  constructor(options = {}, injector) {\n    this.injector = injector;\n    this.defaultOptions = {\n      path: this.injector.get(APP_BASE_HREF, '/'),\n      domain: undefined,\n      expires: undefined,\n      secure: false,\n      httpOnly: false\n    };\n    this.options = mergeOptions(this.defaultOptions, options);\n  }\n\n}\n\nCookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) {\n  return new (t || CookieOptionsProvider)(i0.ɵɵinject(COOKIE_OPTIONS), i0.ɵɵinject(i0.Injector));\n};\n\nCookieOptionsProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CookieOptionsProvider,\n  factory: CookieOptionsProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CookieOptionsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [COOKIE_OPTIONS]\n      }]\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass CookieService {\n  constructor(document, optionsProvider, cookieWriterService) {\n    this.document = document;\n    this.optionsProvider = optionsProvider;\n    this.cookieWriterService = cookieWriterService;\n    this.options = this.optionsProvider.options;\n  }\n  /**\n   * @description\n   * Returns if the given cookie key exists or not.\n   *\n   * @param key Id to use for lookup.\n   * @returns true if key exists, otherwise false.\n   */\n\n\n  hasKey(key) {\n    const value = this.get(key);\n    return isPresent(value);\n  }\n  /**\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n\n\n  get(key) {\n    return this.getAll()?.[key];\n  }\n  /**\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n\n\n  getObject(key) {\n    const value = this.get(key);\n\n    if (isNil(value)) {\n      return undefined;\n    } else if (value === '') {\n      return {};\n    }\n\n    return JSON.parse(value);\n  }\n  /**\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n\n\n  getAll() {\n    const cookieString = this.cookieWriterService.readAllAsString();\n    return parseCookieString(cookieString);\n  }\n  /**\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n\n\n  put(key, value, options) {\n    const opts = mergeOptions(this.options, options);\n    this.cookieWriterService.write(key, value, opts);\n  }\n  /**\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n\n\n  putObject(key, value, options) {\n    this.put(key, JSON.stringify(value), options);\n  }\n  /**\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n\n\n  remove(key, options) {\n    this.put(key, undefined, options);\n  }\n  /**\n   * @description\n   * Remove all cookies.\n   */\n\n\n  removeAll(options) {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => this.remove(key, options));\n  }\n\n}\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(CookieOptionsProvider), i0.ɵɵinject(COOKIE_WRITER));\n};\n\nCookieService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CookieService,\n  factory: CookieService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: CookieOptionsProvider\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [COOKIE_WRITER]\n      }]\n    }];\n  }, null);\n})();\n\nclass CookieWriterService {\n  constructor(document) {\n    this.document = document;\n  }\n\n  readAllAsString() {\n    return this.document.cookie || '';\n  }\n\n  write(name, value, options) {\n    this.document.cookie = buildCookieString(name, value, options);\n  }\n\n}\n\nCookieWriterService.ɵfac = function CookieWriterService_Factory(t) {\n  return new (t || CookieWriterService)(i0.ɵɵinject(DOCUMENT));\n};\n\nCookieWriterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CookieWriterService,\n  factory: CookieWriterService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CookieWriterService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nfunction cookieServiceFactory(document, cookieOptionsProvider, cookieWriterService) {\n  return new CookieService(document, cookieOptionsProvider, cookieWriterService);\n}\n\nclass CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static withOptions(options = {}) {\n    return {\n      ngModule: CookieModule,\n      providers: [{\n        provide: COOKIE_OPTIONS,\n        useValue: options\n      }, {\n        provide: COOKIE_WRITER,\n        useClass: CookieWriterService\n      }, {\n        provide: CookieService,\n        useFactory: cookieServiceFactory,\n        deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER]\n      }]\n    };\n  }\n  /**\n   * @deprecated use `CookieModule.withOptions()` instead\n   * Use this method in your root module to provide the CookieService\n   */\n\n\n  static forRoot(options = {}) {\n    return this.withOptions(options);\n  }\n  /**\n   * @deprecated use `CookieModule.withOptions()` instead\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n\n\n  static forChild(options = {}) {\n    return this.withOptions(options);\n  }\n\n}\n\nCookieModule.ɵfac = function CookieModule_Factory(t) {\n  return new (t || CookieModule)();\n};\n\nCookieModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CookieModule\n});\nCookieModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [CookieOptionsProvider]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CookieModule, [{\n    type: NgModule,\n    args: [{\n      providers: [CookieOptionsProvider]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-cookie\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { COOKIE_OPTIONS, COOKIE_WRITER, CookieModule, CookieOptionsProvider, CookieService, CookieWriterService, buildCookieString, cookieServiceFactory, isEmpty, isNil, isPresent, isString, mergeOptions, parseCookieString, safeDecodeURIComponent };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","NgModule","APP_BASE_HREF","DOCUMENT","COOKIE_OPTIONS","COOKIE_WRITER","isNil","obj","undefined","isPresent","isString","isEmpty","value","length","Array","isArray","Object","keys","constructor","mergeOptions","oldOptions","newOptions","path","domain","expires","secure","sameSite","httpOnly","storeUnencoded","parseCookieString","currentCookieString","lastCookies","lastCookieString","cookieArray","cookie","i","index","name","split","indexOf","safeDecodeURIComponent","substring","trim","buildCookieString","options","val","Date","cookieValue","encodeURIComponent","str","toUTCString","cookieLength","console","log","decodeURIComponent","e","CookieOptionsProvider","injector","defaultOptions","get","ɵfac","Injector","ɵprov","type","decorators","args","CookieService","document","optionsProvider","cookieWriterService","hasKey","key","getAll","getObject","JSON","parse","cookieString","readAllAsString","put","opts","write","putObject","stringify","remove","removeAll","cookies","forEach","CookieWriterService","cookieServiceFactory","cookieOptionsProvider","CookieModule","withOptions","ngModule","providers","provide","useValue","useClass","useFactory","deps","forRoot","forChild","ɵmod","ɵinj"],"sources":["D:/ProiectAngular/angular14-magazin-api/node_modules/ngx-cookie/fesm2020/ngx-cookie.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';\nimport { APP_BASE_HREF, DOCUMENT } from '@angular/common';\n\nconst COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');\nconst COOKIE_WRITER = new InjectionToken('COOKIE_WRITER');\n\nfunction isNil(obj) {\n    return obj === undefined || obj === null;\n}\nfunction isPresent(obj) {\n    return !isNil(obj);\n}\nfunction isString(obj) {\n    return typeof obj === 'string';\n}\n// noinspection JSUnusedGlobalSymbols\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isEmpty(value) {\n    if (isNil(value)) {\n        return true;\n    }\n    if (value === {}) {\n        return true;\n    }\n    if (isString(value) && value.length === 0) {\n        return true;\n    }\n    if (Array.isArray(value) && value.length === 0) {\n        return true;\n    }\n    if (typeof value !== 'boolean' && !value) {\n        return true;\n    }\n    // noinspection RedundantIfStatementJS\n    if (typeof value === 'object' && Object.keys(value).length === 0 && value.constructor === Object) {\n        return true;\n    }\n    return false;\n}\nfunction mergeOptions(oldOptions, newOptions) {\n    if (!newOptions) {\n        return oldOptions;\n    }\n    return {\n        path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n        domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n        expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n        secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n        sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,\n        httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n        storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n    };\n}\nfunction parseCookieString(currentCookieString) {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray;\n    let cookie;\n    let i;\n    let index;\n    let name;\n    if (currentCookieString !== lastCookieString) {\n        lastCookieString = currentCookieString;\n        cookieArray = lastCookieString.split(';');\n        lastCookies = {};\n        for (i = 0; i < cookieArray.length; i++) {\n            cookie = cookieArray[i];\n            index = cookie.indexOf('=');\n            if (index > 0) { // ignore nameless cookies\n                name = safeDecodeURIComponent((cookie.substring(0, index)).trim());\n                // the first value that is seen for a cookie is the most\n                // specific one.  values for the same cookie name that\n                // follow are for less specific paths.\n                if (isNil((lastCookies)[name])) {\n                    lastCookies[name] = safeDecodeURIComponent((cookie.substring(index + 1)).trim());\n                }\n            }\n        }\n    }\n    return lastCookies;\n}\nfunction buildCookieString(name, value, options) {\n    let expires = options?.expires;\n    let val;\n    if (isNil(value)) {\n        expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n        val = '';\n    }\n    else {\n        val = value;\n    }\n    if (isString(expires)) {\n        expires = new Date(expires);\n    }\n    const cookieValue = options?.storeUnencoded ? value : encodeURIComponent(val);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += options?.path ? ';path=' + options.path : '';\n    str += options?.domain ? ';domain=' + options.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += options?.sameSite ? '; SameSite=' + options.sameSite : '';\n    str += options?.secure ? ';secure' : '';\n    str += options?.httpOnly ? '; HttpOnly' : '';\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n        console.log('Cookie \\'' + name + '\\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');\n    }\n    return str;\n}\nfunction safeDecodeURIComponent(str) {\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\n\nclass CookieOptionsProvider {\n    constructor(options = {}, injector) {\n        this.injector = injector;\n        this.defaultOptions = {\n            path: this.injector.get(APP_BASE_HREF, '/'),\n            domain: undefined,\n            expires: undefined,\n            secure: false,\n            httpOnly: false\n        };\n        this.options = mergeOptions(this.defaultOptions, options);\n    }\n}\nCookieOptionsProvider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieOptionsProvider, deps: [{ token: COOKIE_OPTIONS }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nCookieOptionsProvider.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieOptionsProvider });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieOptionsProvider, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [COOKIE_OPTIONS]\n                }] }, { type: i0.Injector }]; } });\n\nclass CookieService {\n    constructor(document, optionsProvider, cookieWriterService) {\n        this.document = document;\n        this.optionsProvider = optionsProvider;\n        this.cookieWriterService = cookieWriterService;\n        this.options = this.optionsProvider.options;\n    }\n    /**\n     * @description\n     * Returns if the given cookie key exists or not.\n     *\n     * @param key Id to use for lookup.\n     * @returns true if key exists, otherwise false.\n     */\n    hasKey(key) {\n        const value = this.get(key);\n        return isPresent(value);\n    }\n    /**\n     * @description\n     * Returns the value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Raw cookie value.\n     */\n    get(key) {\n        return this.getAll()?.[key];\n    }\n    /**\n     * @description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Deserialized cookie value.\n     */\n    getObject(key) {\n        const value = this.get(key);\n        if (isNil(value)) {\n            return undefined;\n        }\n        else if (value === '') {\n            return {};\n        }\n        return JSON.parse(value);\n    }\n    /**\n     * @description\n     * Returns a key value object with all the cookies.\n     *\n     * @returns All cookies\n     */\n    getAll() {\n        const cookieString = this.cookieWriterService.readAllAsString();\n        return parseCookieString(cookieString);\n    }\n    /**\n     * @description\n     * Sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Raw value to be stored.\n     * @param options (Optional) Options object.\n     */\n    put(key, value, options) {\n        const opts = mergeOptions(this.options, options);\n        this.cookieWriterService.write(key, value, opts);\n    }\n    /**\n     * @description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Value to be stored.\n     * @param options (Optional) Options object.\n     */\n    putObject(key, value, options) {\n        this.put(key, JSON.stringify(value), options);\n    }\n    /**\n     * @description\n     * Remove given cookie.\n     *\n     * @param key Id of the key-value pair to delete.\n     * @param options (Optional) Options object.\n     */\n    remove(key, options) {\n        this.put(key, undefined, options);\n    }\n    /**\n     * @description\n     * Remove all cookies.\n     */\n    removeAll(options) {\n        const cookies = this.getAll();\n        Object.keys(cookies).forEach(key => this.remove(key, options));\n    }\n}\nCookieService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieService, deps: [{ token: DOCUMENT }, { token: CookieOptionsProvider }, { token: COOKIE_WRITER }], target: i0.ɵɵFactoryTarget.Injectable });\nCookieService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: CookieOptionsProvider }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [COOKIE_WRITER]\n                }] }]; } });\n\nclass CookieWriterService {\n    constructor(document) {\n        this.document = document;\n    }\n    readAllAsString() {\n        return this.document.cookie || '';\n    }\n    write(name, value, options) {\n        this.document.cookie = buildCookieString(name, value, options);\n    }\n}\nCookieWriterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieWriterService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nCookieWriterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieWriterService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieWriterService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nfunction cookieServiceFactory(document, cookieOptionsProvider, cookieWriterService) {\n    return new CookieService(document, cookieOptionsProvider, cookieWriterService);\n}\n\nclass CookieModule {\n    /**\n     * Use this method in your root module to provide the CookieService\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: CookieModule,\n            providers: [\n                { provide: COOKIE_OPTIONS, useValue: options },\n                { provide: COOKIE_WRITER, useClass: CookieWriterService },\n                { provide: CookieService, useFactory: cookieServiceFactory, deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER] }\n            ]\n        };\n    }\n    /**\n     * @deprecated use `CookieModule.withOptions()` instead\n     * Use this method in your root module to provide the CookieService\n     */\n    static forRoot(options = {}) {\n        return this.withOptions(options);\n    }\n    /**\n     * @deprecated use `CookieModule.withOptions()` instead\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(options = {}) {\n        return this.withOptions(options);\n    }\n}\nCookieModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCookieModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieModule });\nCookieModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieModule, providers: [CookieOptionsProvider] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.4\", ngImport: i0, type: CookieModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [CookieOptionsProvider]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-cookie\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COOKIE_OPTIONS, COOKIE_WRITER, CookieModule, CookieOptionsProvider, CookieService, CookieWriterService, buildCookieString, cookieServiceFactory, isEmpty, isNil, isPresent, isString, mergeOptions, parseCookieString, safeDecodeURIComponent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}